{
  "name": "com.unity.burst",
  "displayName": "Burst",
  "version": "1.8.8",
  "unity": "2020.3",
  "description": "Burst is a compiler that translates from IL/.NET bytecode to highly optimized native code using LLVM.",
  "dependencies": {
    "com.unity.mathematics": "1.2.1"
  },
  "_upm": {
    "changelog": "### Fixed\n- Fixed error when trying to use direct call to a nested protected class\n- Fixed that converting a negated unsigned type to a float would produce a mismatching value in Burst versus .Net/Mono\n- Fixed that the Burst Inspector handled negation of unsigned types differently than .Net for static readonly fields or static constructors\n- Fixed Burst sometimes returning wrong value for static readonly fields or static constructors.\n- Fixed a possible source of invalid alignment, avx2 storing to stack was given a slot with the wrong alignment.\n- Fixed `System.NotImplementedException: Unimplemented Instruction Extension Tail_` error when the code contained tail-calls\n- Fixed wrong alignment for v128 when doing an indirect access.\n- Fix compiler crash when compiling different assemblies that define methods or types with the exact same name and namespace\n- Fixed using Armv9 target in the Burst Inspector not formatting the assembly.\n- Fixed that jobs wouldn't be Burst compiled for player builds with high stripping\n- Fixed burst not being able to find external function leading to crashing the Editor\n- Prevented Burst emitting errors even when Burst was disabled via the `--burst-disable-compilation` command line option\n- Under some conditions (if the error in compilation occurred in a location that didn't have valid debug information), building a player might not generate any files, and not display any errors.\n- Fixed `uint` to `float` conversion edge-case\n- Fixed a compile-time performance regression in 1.8.7 that could result in slower Burst compilation and increased memory usage during compilation\n\n### Added\n- Added support for default interface methods\n- Added ability to support hashing against different target frameworks.\n- Added support for string interpolation in exception messages\n- Add support for `Math.Clamp` (this API is available when Api Compatibility Level is set to .NET Standard 2.1)\n\n### Removed\n\n### Changed\n- Direct call is now correctly disabled for methods that are decorated with both `[BurstCompile]` and `[UnmanagedCallersOnly]` attributes (such methods shouldn't be called directly from managed code)\n\n### Known Issues"
  },
  "upmCi": {
    "footprint": "2e19635fd1a34d668bc411845c5b4ee6f0e69d87"
  },
  "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.burst@1.8/manual/index.html",
  "repository": {
    "url": "git@github.cds.internal.unity3d.com:unity/burst",
    "type": "git",
    "revision": "7673d9a736112fc9d58f32024c19150c2fa6d8ea"
  }
}
